{"version":3,"sources":["C:/Users/jonma/Desktop/denton-kiosk/node_modules/@angular/material/fesm2015/button.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6GC,u7MAkBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoDD,u7MAuBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASA;;;;;;;;;;;;;;;;;;;;;CAeD;;;;;;;;;;;;;;;;;;;;;;;0BAiBC","file":"button.js","sourcesContent":["import { Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Optional, Inject, ViewChild, Input, NgModule } from '@angular/core';\r\nimport { mixinColor, mixinDisabled, mixinDisableRipple, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\r\nimport { FocusMonitor } from '@angular/cdk/a11y';\r\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/material/button/button.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Default color palette for round buttons (mat-fab and mat-mini-fab)\r\n * @type {?}\r\n */\r\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\r\n/**\r\n * List of classes to add to MatButton instances based on host attributes to\r\n * style as different variants.\r\n * @type {?}\r\n */\r\nconst BUTTON_HOST_ATTRIBUTES = [\r\n    'mat-button',\r\n    'mat-flat-button',\r\n    'mat-icon-button',\r\n    'mat-raised-button',\r\n    'mat-stroked-button',\r\n    'mat-mini-fab',\r\n    'mat-fab',\r\n];\r\n// Boilerplate for applying mixins to MatButton.\r\n/**\r\n * \\@docs-private\r\n */\r\nclass MatButtonBase {\r\n    /**\r\n     * @param {?} _elementRef\r\n     */\r\n    constructor(_elementRef) {\r\n        this._elementRef = _elementRef;\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    MatButtonBase.prototype._elementRef;\r\n}\r\n/** @type {?} */\r\nconst _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\r\n/**\r\n * Material design button.\r\n */\r\nclass MatButton extends _MatButtonMixinBase {\r\n    /**\r\n     * @param {?} elementRef\r\n     * @param {?} _focusMonitor\r\n     * @param {?} _animationMode\r\n     */\r\n    constructor(elementRef, _focusMonitor, _animationMode) {\r\n        super(elementRef);\r\n        this._focusMonitor = _focusMonitor;\r\n        this._animationMode = _animationMode;\r\n        /**\r\n         * Whether the button is round.\r\n         */\r\n        this.isRoundButton = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\r\n        /**\r\n         * Whether the button is icon button.\r\n         */\r\n        this.isIconButton = this._hasHostAttributes('mat-icon-button');\r\n        // For each of the variant selectors that is present in the button's host\r\n        // attributes, add the correct corresponding class.\r\n        for (const attr of BUTTON_HOST_ATTRIBUTES) {\r\n            if (this._hasHostAttributes(attr)) {\r\n                ((/** @type {?} */ (this._getHostElement()))).classList.add(attr);\r\n            }\r\n        }\r\n        // Add a class that applies to all buttons. This makes it easier to target if somebody\r\n        // wants to target all Material buttons. We do it here rather than `host` to ensure that\r\n        // the class is applied to derived classes.\r\n        elementRef.nativeElement.classList.add('mat-button-base');\r\n        this._focusMonitor.monitor(this._elementRef, true);\r\n        if (this.isRoundButton) {\r\n            this.color = DEFAULT_ROUND_BUTTON_COLOR;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._focusMonitor.stopMonitoring(this._elementRef);\r\n    }\r\n    /**\r\n     * Focuses the button.\r\n     * @param {?=} origin\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    focus(origin = 'program', options) {\r\n        this._focusMonitor.focusVia(this._getHostElement(), origin, options);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _getHostElement() {\r\n        return this._elementRef.nativeElement;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _isRippleDisabled() {\r\n        return this.disableRipple || this.disabled;\r\n    }\r\n    /**\r\n     * Gets whether the button has one of the given attributes.\r\n     * @param {...?} attributes\r\n     * @return {?}\r\n     */\r\n    _hasHostAttributes(...attributes) {\r\n        return attributes.some((/**\r\n         * @param {?} attribute\r\n         * @return {?}\r\n         */\r\n        attribute => this._getHostElement().hasAttribute(attribute)));\r\n    }\r\n}\r\nMatButton.decorators = [\r\n    { type: Component, args: [{\r\n                selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\r\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\r\n             button[mat-flat-button]`,\r\n                exportAs: 'matButton',\r\n                host: {\r\n                    '[attr.disabled]': 'disabled || null',\r\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\r\n                    'class': 'mat-focus-indicator',\r\n                },\r\n                template: \"<span class=\\\"mat-button-wrapper\\\"><ng-content></ng-content></span>\\n<div matRipple class=\\\"mat-button-ripple\\\"\\n     [class.mat-button-ripple-round]=\\\"isRoundButton || isIconButton\\\"\\n     [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n     [matRippleCentered]=\\\"isIconButton\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\"></div>\\n<div class=\\\"mat-button-focus-overlay\\\"></div>\\n\",\r\n                inputs: ['disabled', 'disableRipple', 'color'],\r\n                encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                styles: [\".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:.04}@media(hover: none){.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-icon-button,.mat-stroked-button,.mat-flat-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-button[disabled],.mat-icon-button[disabled],.mat-stroked-button[disabled],.mat-flat-button[disabled]{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button[disabled]{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-ripple.mat-ripple,.mat-stroked-button .mat-button-focus-overlay{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab[disabled]{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab[disabled]{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button i,.mat-icon-button .mat-icon{line-height:24px}.mat-button-ripple.mat-ripple,.mat-button-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1),background-color 200ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}.cdk-high-contrast-active .mat-button-focus-overlay{background-color:#fff}.cdk-high-contrast-black-on-white .mat-button-focus-overlay{background-color:#000}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}.cdk-high-contrast-active .mat-button,.cdk-high-contrast-active .mat-flat-button,.cdk-high-contrast-active .mat-raised-button,.cdk-high-contrast-active .mat-icon-button,.cdk-high-contrast-active .mat-fab,.cdk-high-contrast-active .mat-mini-fab{outline:solid 1px}\\n\"]\r\n            }] }\r\n];\r\n/** @nocollapse */\r\nMatButton.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: FocusMonitor },\r\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\r\n];\r\nMatButton.propDecorators = {\r\n    ripple: [{ type: ViewChild, args: [MatRipple,] }]\r\n};\r\nif (false) {\r\n    /** @type {?} */\r\n    MatButton.ngAcceptInputType_disabled;\r\n    /** @type {?} */\r\n    MatButton.ngAcceptInputType_disableRipple;\r\n    /**\r\n     * Whether the button is round.\r\n     * @type {?}\r\n     */\r\n    MatButton.prototype.isRoundButton;\r\n    /**\r\n     * Whether the button is icon button.\r\n     * @type {?}\r\n     */\r\n    MatButton.prototype.isIconButton;\r\n    /**\r\n     * Reference to the MatRipple instance of the button.\r\n     * @type {?}\r\n     */\r\n    MatButton.prototype.ripple;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    MatButton.prototype._focusMonitor;\r\n    /** @type {?} */\r\n    MatButton.prototype._animationMode;\r\n}\r\n/**\r\n * Material design anchor button.\r\n */\r\nclass MatAnchor extends MatButton {\r\n    /**\r\n     * @param {?} focusMonitor\r\n     * @param {?} elementRef\r\n     * @param {?} animationMode\r\n     */\r\n    constructor(focusMonitor, elementRef, animationMode) {\r\n        super(elementRef, focusMonitor, animationMode);\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _haltDisabledEvents(event) {\r\n        // A disabled button shouldn't apply any actions\r\n        if (this.disabled) {\r\n            event.preventDefault();\r\n            event.stopImmediatePropagation();\r\n        }\r\n    }\r\n}\r\nMatAnchor.decorators = [\r\n    { type: Component, args: [{\r\n                selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\r\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\r\n                exportAs: 'matButton, matAnchor',\r\n                host: {\r\n                    // Note that we ignore the user-specified tabindex when it's disabled for\r\n                    // consistency with the `mat-button` applied on native buttons where even\r\n                    // though they have an index, they're not tabbable.\r\n                    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\r\n                    '[attr.disabled]': 'disabled || null',\r\n                    '[attr.aria-disabled]': 'disabled.toString()',\r\n                    '(click)': '_haltDisabledEvents($event)',\r\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\r\n                    'class': 'mat-focus-indicator',\r\n                },\r\n                inputs: ['disabled', 'disableRipple', 'color'],\r\n                template: \"<span class=\\\"mat-button-wrapper\\\"><ng-content></ng-content></span>\\n<div matRipple class=\\\"mat-button-ripple\\\"\\n     [class.mat-button-ripple-round]=\\\"isRoundButton || isIconButton\\\"\\n     [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n     [matRippleCentered]=\\\"isIconButton\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\"></div>\\n<div class=\\\"mat-button-focus-overlay\\\"></div>\\n\",\r\n                encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                styles: [\".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:.04}@media(hover: none){.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-icon-button,.mat-stroked-button,.mat-flat-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-button[disabled],.mat-icon-button[disabled],.mat-stroked-button[disabled],.mat-flat-button[disabled]{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button[disabled]{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-ripple.mat-ripple,.mat-stroked-button .mat-button-focus-overlay{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab[disabled]{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab[disabled]{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button i,.mat-icon-button .mat-icon{line-height:24px}.mat-button-ripple.mat-ripple,.mat-button-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1),background-color 200ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}.cdk-high-contrast-active .mat-button-focus-overlay{background-color:#fff}.cdk-high-contrast-black-on-white .mat-button-focus-overlay{background-color:#000}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}.cdk-high-contrast-active .mat-button,.cdk-high-contrast-active .mat-flat-button,.cdk-high-contrast-active .mat-raised-button,.cdk-high-contrast-active .mat-icon-button,.cdk-high-contrast-active .mat-fab,.cdk-high-contrast-active .mat-mini-fab{outline:solid 1px}\\n\"]\r\n            }] }\r\n];\r\n/** @nocollapse */\r\nMatAnchor.ctorParameters = () => [\r\n    { type: FocusMonitor },\r\n    { type: ElementRef },\r\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\r\n];\r\nMatAnchor.propDecorators = {\r\n    tabIndex: [{ type: Input }]\r\n};\r\nif (false) {\r\n    /**\r\n     * Tabindex of the button.\r\n     * @type {?}\r\n     */\r\n    MatAnchor.prototype.tabIndex;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/material/button/button-module.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass MatButtonModule {\r\n}\r\nMatButtonModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [\r\n                    MatRippleModule,\r\n                    MatCommonModule,\r\n                ],\r\n                exports: [\r\n                    MatButton,\r\n                    MatAnchor,\r\n                    MatCommonModule,\r\n                ],\r\n                declarations: [\r\n                    MatButton,\r\n                    MatAnchor,\r\n                ],\r\n            },] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: src/material/button/public-api.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { MatAnchor, MatButton, MatButtonModule };\r\n\r\n"]}